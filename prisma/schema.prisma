generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MemberRole {
  OWNER
  MEMBER
}

enum MessageType {
  TEXT
  FILE
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  avatar        String?
  googleId      String    @unique
  isOnline      Boolean   @default(false)
  lastSeen      DateTime  @default(now())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  ownedRooms    Room[]    @relation("RoomOwner")
  memberships   RoomMember[]
  messages      Message[]

  @@map("users")
}

model Room {
  id          String      @id @default(cuid())
  name        String
  description String?
  isPrivate   Boolean     @default(false)
  maxMembers  Int         @default(50)
  ownerId     String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  owner       User        @relation("RoomOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members     RoomMember[]
  messages    Message[]

  @@map("rooms")
}

model RoomMember {
  id        String   @id @default(cuid())
  userId    String
  roomId    String
  joinedAt  DateTime @default(now())
  role      MemberRole @default(MEMBER)

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([userId, roomId])
  @@map("room_members")
}

model Message {
  id        String      @id @default(cuid())
  content   String
  type      MessageType @default(TEXT)
  userId    String
  roomId    String
  replyToId String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  replyTo   Message? @relation("MessageReply", fields: [replyToId], references: [id])
  replies   Message[] @relation("MessageReply")

  @@map("messages")
}